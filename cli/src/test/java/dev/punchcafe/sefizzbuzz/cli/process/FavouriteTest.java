/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.punchcafe.sefizzbuzz.cli.process;

import dev.punchcafe.sefizzbuzz.cli.client.FavouritePayload;
import dev.punchcafe.sefizzbuzz.cli.client.FizzBuzzClient;
import dev.punchcafe.sefizzbuzz.cli.client.FizzBuzzEntity;
import dev.punchcafe.sefizzbuzz.cli.config.AppConfig;
import dev.punchcafe.sefizzbuzz.cli.config.AppFactory;
import dev.punchcafe.sefizzbuzz.cli.io.UserInputReader;
import dev.punchcafe.sefizzbuzz.cli.io.UserOutputWriter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;

import static dev.punchcafe.sefizzbuzz.cli.constant.MessageConstants.HELP_MESSAGE;
import static org.mockito.Mockito.*;

class FavouriteTest {

    private FizzBuzzClient fizzBuzzClient;
    private UserOutputWriter userOutputWriter;
    private UserInputReader userInputReader;
    private AppProcess appProcess;

    @BeforeEach
    void beforeEach() {
        userOutputWriter = Mockito.spy(new UserOutputWriter());
        userInputReader = Mockito.mock(UserInputReader.class);
        fizzBuzzClient = Mockito.mock(FizzBuzzClient.class);
        final var appConfig = AppConfig.builder()
                .userOutputWriter(userOutputWriter)
                .userInputReader(userInputReader)
                .fizzBuzzClient(fizzBuzzClient)
                .build();
        appProcess = new AppFactory(appConfig).buildApp();
    }

    @Test
    void userCanFavouriteFizzBuzz() {
        when(fizzBuzzClient.updateFavourite(eq(15), eq(FavouritePayload.buildFrom(true))))
                .thenReturn(new FizzBuzzEntity(15, "FizzBuzz", true));
        appProcess.execute(List.of("favourite", "15"));
        verify(fizzBuzzClient, times(1)).updateFavourite(15, FavouritePayload.buildFrom(true));
        verify(userOutputWriter, times(1))
                .printToUser("Result:  id: 15,  value: FizzBuzz");
    }

    @Test
    void userCanUnfavouriteFizzBuzz() {
        when(fizzBuzzClient.updateFavourite(eq(15), eq(FavouritePayload.buildFrom(false))))
                .thenReturn(new FizzBuzzEntity(15, "FizzBuzz", false));
        appProcess.execute(List.of("unfavourite", "15"));
        verify(fizzBuzzClient, times(1)).updateFavourite(15, FavouritePayload.buildFrom(false));
        verify(userOutputWriter, times(1))
                .printToUser("Result:  id: 15,  value: FizzBuzz");
    }
}
